<style lang="less">
  .shadow {
    padding: 10px;
    border-radius: 3px;
    background-color: rgba(0, 0, 0, .5);
  }
  .mask-block{
    width: 100%;
    height: 100%;
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .button-group{
    position: absolute;
    bottom: 10px;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: space-around;
  }
  live-pusher{
    position: absolute;
    bottom: 10px;
    right: 10px;
    width: 90px;
    height: 160px;
    // width: 180px;
    // height: 320px;
  }

  live-player{
    position: absolute;
    top: 10px;
    right: 10px;
    width: 90px;
    height: 160px;
  }

  van-button{
    .circle-btn{
      border-radius: 3em;
      padding: 2px 0px;
      width: 45px;
      border: none;
    }
    .normal-color{
      background: gray;
    }
  }
  .player-cover-view{
    width: 100%;
    height: 100%;
    position: absolute;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    .png-btn-group{
      position: relative;
      left: 10px;
      height: 300px;
      width: 50px;
      display: flex;
      flex-direction: column;
      justify-content: space-around;
      align-items: center;
      .png-btn{
        width: 44px;
        height: 44px;
      }
    }

  }
  .presentation-frame{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height:100%;
  }
</style>
<template>
  <view class="container">
    <view wx:if="{{presenting}}" style=" top:0; left: 0; width: 100%; height: 100%">
    <image class="presentation-frame" style="transform: rotate(90deg) scale({{imageRotateScale}});" mode="aspectFit" wx:for="{{presentationFrames}}" src="{{item.url}}" wx:key="{{item.id}}"></image>
    </view>
    <live-pusher id="pusher"
      class="pusher"
      wx:if="{{pushUrl && pageShow}}"
      url="{{pushUrl}}"
      muted="{{muteMic}}"
      orientation="horizontal"
      bindstatechange="pusherStateChange"
      mode="SD"
      autopush
    >
      <cover-view class="pusher-cover-view" @tap="switchBtnPanel"/>
    </live-pusher>
    <live-player id="player"
      wx:if="{{playUrl && pageShow}}"
      src="{{playUrl}}"
      mode="live"
      orientation="horizontal"
      bindstatechange="playerStateChange"
      autoplay
      binderror="playerError"
    >
      <cover-view class="player-cover-view" @tap="switchBtnPanel" wx:if="{{!presenting}}">
        <cover-view class="png-btn-group" wx:if="{{pngBtnPanelTimer }}">
          <cover-view class="png-btn" @tap="muteMic">
            <cover-image wx:if="{{!muteMic}}" src="../assets/images/volume-high.png"></cover-image>
            <cover-image wx:if="{{muteMic}}" src="../assets/images/volume-off.png"></cover-image>
          </cover-view>
          <cover-view class="png-btn" @tap="pauseCamera">
            <cover-image wx:if="{{!cameraMute}}" src="../assets/images/video.png"></cover-image>
            <cover-image wx:if="{{cameraMute}}" src="../assets/images/video-off.png"></cover-image>
          </cover-view>
          <cover-view class="png-btn" @tap="switchCamera">
            <cover-image src="../assets/images/camera-switch.png"></cover-image>
          </cover-view>
          <cover-view class="png-btn" @tap="stopConf">
            <cover-image src="../assets/images/phone-hangup.png"></cover-image>
          </cover-view>
        </cover-view>
      </cover-view>  
    </live-player>
    <cover-view class="player-cover-view" @tap="switchBtnPanel" >
      <cover-view class="png-btn-group" wx:if="{{pngBtnPanelTimer}}">
        <cover-view class="png-btn" @tap="muteMic">
          <cover-image wx:if="{{!muteMic}}" src="../assets/images/volume-high.png"></cover-image>
          <cover-image wx:if="{{muteMic}}" src="../assets/images/volume-off.png"></cover-image>
        </cover-view>
        <cover-view class="png-btn" @tap="pauseCamera">
          <cover-image wx:if="{{!cameraMute}}" src="../assets/images/video.png"></cover-image>
          <cover-image wx:if="{{cameraMute}}" src="../assets/images/video-off.png"></cover-image>
        </cover-view>
        <cover-view class="png-btn" @tap="switchCamera">
          <cover-image src="../assets/images/camera-switch.png"></cover-image>
        </cover-view>
        <cover-view class="png-btn" @tap="stopConf">
          <cover-image src="../assets/images/phone-hangup.png"></cover-image>
        </cover-view>
      </cover-view>
    </cover-view> 
    <view wx:if="{{loading}}" class="mask-block" catchtap='block' catchtouchmove="block">
      <van-loading custom-class="shadow" color="#fff"/>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import {asyncAuth,
          makeCall,
          showMessage,
          refreshToken,
          disconnect,
          showWxapp,
          hideWxapp
        } from '../store/actions/'
  const PNG_BTN_AUTO_HIDE = 13 * 1000
  @connect({
    loading (state) {
      return state.conference.loading
    },
    displayName (state) {
      return state.conference.displayName
    },
    playUrl (state) {
      return state.conference.playUrl
    },
    pushUrl (state) {
      return state.conference.pushUrl
    },
    alias (state) {
      return state.conference.alias
    },
    enterAlias (state) {
      return state.conference.enterAlias
    },
    token (state) {
      return state.conference.token
    },
    mcuHost (state) {
      return state.conference.mcuHost
    },
    presenting (state) {
      return state.conference.presenting
    },
    presentaterName (state) {
      return state.conference.presentaterName
    },
    presentationFrames (state) {
      return state.conference.presentationFrames
    },
    presentationFrameUrlLast (state) {
      return state.conference.presentationFrameUrlLast
    },
    password (state) {
      return state.conference.password
    },
    errorMessage (state) {
      if (state.conference.errorMessage) {
        this.methods.showMessage(state.conference.errorMessage)
      }
      return state.conference.errorMessage
    },
    pageShow (state) {
      return state.conference.appIsForeground
    }
  }, {
    asyncAuth,
    makeCall,
    refreshToken,
    showMessage,
    disconnect,
    showWxapp,
    hideWxapp
  })

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: this.enterAlias,
      usingComponents: {
        'van-button': '../vant/button/index',
        'van-field': '../vant/field/index',
        'van-cell': '../vant/cell/index',
        'van-cell-group': '../vant/cell-group/index',
        'van-icon': '../vant/icon/index',
        'van-loading': '../vant/loading/index'
      }
    }
    components = {}

    data = {
      ctxPusher: null,
      ctxPlayer: null,
      muteMic: false,
      cameraMute: false,
      fullScreen: true,
      pngBtnPanelTimer: null,
      imageRotateScale: 1.78
    }

    computed = {}

    watch = {
      fullScreen: (newValue, oldValue) => {
        if (newValue !== oldValue) {
          if (newValue) this.ctxPlayer.requestFullScreen()
          else this.ctxPlayer.exitFullScreen()
        }
      },
      presenting: (newValue, oldValue) => {
        this.ctxPusher = wepy.createLivePusherContext('pusher')
        this.ctxPlayer = wepy.createLivePlayerContext('player')
        this.fullScreen = !newValue
        this.$apply()
      }
    }

    methods = {
      stopConf: () => {
        this.ctxPusher.stop()
        this.ctxPlayer.stop()
        this.methods.disconnect({alias: this.alias,
          participantUuid: this.participantUuid,
          callUuid: this.callUuid,
          mcuHost: this.mcuHost,
          token: this.token})
        wx.navigateBack()
      },
      restartConf: () => {
        this.methods.makeCall({displayName: this.displayName,
          pin: this.password,
          mcuHost: this.mcuHost,
          alias: this.alias})
        this.ctxPusher = wepy.createLivePusherContext('pusher')
        this.ctxPlayer = wepy.createLivePlayerContext('player')
      },
      muteMic: () => {
        this.muteMic = !this.muteMic
        // if (this.mute) this.ctxPlayer.mute()
        // else this.ctxPlayer.resume()
        this.$apply()
      },
      pauseCamera: () => {
        this.cameraMute = !this.cameraMute
        if (this.cameraMute) this.ctxPusher.pause()
        else this.ctxPusher.resume()
      },
      switchCamera: () => {
        this.ctxPusher.switchCamera()
      },
      switchFullScreen: () => {
        this.fullScreen = !this.fullScreen
        this.$apply()
      },
      switchBtnPanel: () => {
        if (this.pngBtnPanelTimer) {
          clearTimeout(this.pngBtnPanelTimer)
        }
        this.pngBtnPanelTimer = setTimeout(() => {
          this.pngBtnPanelTimer = null
        }, PNG_BTN_AUTO_HIDE)
      },
      pusherStateChange: (e) => {
        console.log('pusherStateChange', e)
        console.log('pusherStateChangeEnd')
      },
      playerStateChange: (e) => {
        console.log('playerStateChange', e)
        console.log('playerStateChangeEnd')
      },
      playerError: (e) => {
        console.log('[player error]', e)
      }
    }

    events = {}

    onLoad() {
      console.log('[Page] onLoad')
      wx.setNavigationBarTitle({
        title: this.enterAlias
      })
      this.methods.makeCall({displayName: this.displayName,
        pin: this.password,
        mcuHost: this.mcuHost,
        alias: this.alias})
      this.ctxPusher = wepy.createLivePusherContext('pusher')
      this.ctxPlayer = wepy.createLivePlayerContext('player')
      this.pngBtnPanelTimer = setTimeout(() => {
        this.pngBtnPanelTimer = null
      }, PNG_BTN_AUTO_HIDE)

      wx.getSystemInfo({success: res => {
        this.imageRotateScale = res.windowHeight / res.windowWidth
      }})
    }

    onUnload() {
      console.log('[Page] onUnLoad')
      wx.closeSocket()
      this.methods.disconnect({alias: this.alias,
        participantUuid: this.participantUuid,
        callUuid: this.callUuid,
        mcuHost: this.mcuHost,
        token: this.token})
    }
    onShow() {
      console.log('[Page] onShow')
      // this.methods.showWxapp()
      // this.ctxPusher.resume()
      // this.ctxPlayer.resume()
      if (this.fullScreen) this.ctxPlayer.requestFullScreen()

      wx.setKeepScreenOn({keepScreenOn: true,
        success: () => {
          console.log('setKeepScreenOn success')
        },
        fail: () => {
          console.log('setKeepScreenOn fail')
        }})
    }
    onHide() {
      console.log('[Page] onHide')
      // this.methods.hideWxapp()
      // this.ctxPusher.pause()
      // this.ctxPlayer.pause()
    }
  }
</script>
